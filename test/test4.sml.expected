type (*0*) 'a (*1*) person (*2*) = (*3*)
  { (*4*)
    name: (*5*) 'a (*6*)
  , (*7*)
    age: (*8*) int (*9*)
  , (*10*)
    address: (*11*)
      { (*12*) name: (*13*) 'a (*14*)
      , (*15*) locations: (*16*) string (*17*) list (*18*)
      } (*19*)
  } (*20*)
fun updatePerson0 r =
  let
    fun from name locations = {name = name, locations = locations}
    fun to ? {name, locations} = ? name locations
  in
    FunctionalRecordUpdate.makeUpdate2 (from, from, to) r
  end
fun updatePerson1 r =
  let
    fun from name age address = {name = name, age = age, address = address}
    fun to ? {name, age, address} =
      ? name age address
  in
    FunctionalRecordUpdate.makeUpdate3 (from, from, to) r
  end

datatype 'a person =
  Person of {name: 'a, age: int, address: {name: 'a, locations: string list}}
fun updatePerson0 r =
  let
    fun from name locations = {name = name, locations = locations}
    fun to ? {name, locations} = ? name locations
  in
    FunctionalRecordUpdate.makeUpdate2 (from, from, to) r
  end
fun updatePerson1 r =
  let
    fun from name age address = {name = name, age = age, address = address}
    fun to ? {name, age, address} =
      ? name age address
  in
    FunctionalRecordUpdate.makeUpdate3 (from, from, to) r
  end

datatype (*21*) ( (*22*)'a (*23*), (*24*) 'b (*25*)) (*26*) t (*27*) = (*28*)
(*29*)
  A (*30*) of (*31*)
    { (*32*)
      a: (*33*) int (*34*)
    , (*35*)
      b: (*36*) { (*37*)
        c: (*38*)
          int (*39*)
          * (*40*) string (*41*)
          * (*42*) int (*43*) option (*44*) list (*45*)} (*46*)
    } (*47*)
| (*48*) B (*49*) of (*50*)
    { (*51*) d: (*52*) int (*53*) list (*54*)
    , (*55*) e: (*56*) 'b (*57*) option (*58*)
    , (*59*) f: (*60*) { (*61*)g: (*62*) 'a (*63*)} (*64*)
    } (*65*)
| (*66*) C (*67*) of (*68*)
    { (*69*)
      a: (*70*) { (*71*)b: (*72*) { (*73*)c: (*74*) int (*75*)} (*76*)} (*77*)} (*78*)
fun updateTA0 r =
  let
    fun from c = {c = c}
    fun to ? {c} = ? c
  in
    FunctionalRecordUpdate.makeUpdate1 (from, from, to) r
  end
fun updateTA1 r =
  let
    fun from a b = {a = a, b = b}
    fun to ? {a, b} = ? a b
  in
    FunctionalRecordUpdate.makeUpdate2 (from, from, to) r
  end
fun updateTB0 r =
  let
    fun from g = {g = g}
    fun to ? {g} = ? g
  in
    FunctionalRecordUpdate.makeUpdate1 (from, from, to) r
  end
fun updateTB1 r =
  let
    fun from d e f = {d = d, e = e, f = f}
    fun to ? {d, e, f} =
      ? d e f
  in
    FunctionalRecordUpdate.makeUpdate3 (from, from, to) r
  end
fun updateTC0 r =
  let
    fun from c = {c = c}
    fun to ? {c} = ? c
  in
    FunctionalRecordUpdate.makeUpdate1 (from, from, to) r
  end
fun updateTC1 r =
  let
    fun from b = {b = b}
    fun to ? {b} = ? b
  in
    FunctionalRecordUpdate.makeUpdate1 (from, from, to) r
  end
fun updateTC2 r =
  let
    fun from a = {a = a}
    fun to ? {a} = ? a
  in
    FunctionalRecordUpdate.makeUpdate1 (from, from, to) r
  end