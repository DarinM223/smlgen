structure Bar =
struct
  datatype 'a t = Bar of {a: int, b: 'a}
  val compare = fn a_ =>
    fn (Bar {a = t0, b = t1}, Bar {a = t2, b = t3}) =>
      (case Int.compare (t0, t2) of
         EQUAL => a_ (t1, t3)
       | ? => ?)
  datatype bar = Bar' of int * int t
  val compareBar = fn (Bar' (t0, t1), Bar' (t2, t3)) =>
    (case Int.compare (t0, t2) of
       EQUAL => compare Int.compare (t1, t3)
     | ? => ?)
end

structure Foo =
struct
  datatype 'a t = Foo of int Bar.t * 'a Bar.t * Bar.bar * 'a t | Nil
  local
    val rec t = fn (t_0, a_) =>
      fn (Foo (t0, t1, t2, t3), Foo (t4, t5, t6, t7)) =>
        (case Bar.compare Int.compare (t0, t4) of
           EQUAL =>
             (case Bar.compare a_ (t1, t5) of
                EQUAL =>
                  (case Bar.compareBar (t2, t6) of
                     EQUAL => t_0 (t3, t7)
                   | ? => ?)
              | ? => ?)
         | ? => ?)
       | (Foo _, Nil) => LESS
       | (Nil, Foo _) => GREATER
       | (Nil, Nil) => EQUAL
    val t = fn a_ => let val rec t_0 = fn ? => t (t_0, a_) ? in t_0 end
  in val compare = t
  end
  type foo = {a: int * int, b: int t}
  val compareFoo = fn ({a = (t0, t1), b = t2}, {a = (t3, t4), b = t5}) =>
    (case
       (case Int.compare (t0, t3) of
          EQUAL => Int.compare (t1, t4)
        | ? => ?)
     of
       EQUAL => compare Int.compare (t2, t5)
     | ? => ?)
end