structure Bar =
struct
  datatype 'a t = Bar of {a: int, b: 'a}
  val show = fn a_ =>
    fn Bar {a = t0, b = t1} =>
      "Bar "
      ^ "{" ^ String.concatWith ", " ["a = " ^ Int.toString t0, "b = " ^ a_ t1]
      ^ "}"
  datatype bar = Bar' of int * int t
  val showBar = fn Bar' (t0, t1) =>
    "Bar' "
    ^ "(" ^ String.concatWith ", " [Int.toString t0, show Int.toString t1] ^ ")"
end

structure Foo =
struct
  datatype 'a t = Foo of int Bar.t * 'a Bar.t * Bar.bar * 'a t | Nil
  local
    val rec t = fn (t_0, a_) =>
      fn Foo (t0, t1, t2, t3) =>
        "Foo "
        ^
        "("
        ^
        String.concatWith ", "
          [Bar.show Int.toString t0, Bar.show a_ t1, Bar.showBar t2, t_0 t3]
        ^ ")"
       | Nil => "Nil"
    val t = fn a_ => let val rec t_0 = fn ? => t (t_0, a_) ? in t_0 end
  in val show = t
  end
  type foo = {a: int * int, b: int t}
  val showFoo = fn {a = (t0, t1), b = t2} =>
    "{"
    ^
    String.concatWith ", "
      [ "a = " ^ "(" ^ String.concatWith ", " [Int.toString t0, Int.toString t1]
        ^ ")"
      , "b = " ^ show Int.toString t2
      ] ^ "}"
end