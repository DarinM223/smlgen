infix & *` +`

datatype (*a*) ( (*b*)'a (*c*), (*d*) 'b (*e*)) (*f*) stmt (*g*) =
(*h*)
  Assign (*i*) of (*j*)
    'a (*k*)
    * (*l*) ( (*m*)'a (*n*), (*o*) 'b (*p*)) (*q*) expr (*r*)
| (*s*) If (*t*) of (*u*)
    ( (*v*) 'a (*w*)
    , (*x*) 'b (*y*)
    ) (*z*) expr (*1*)
    * (*2*) ( (*3*)'b (*4*), (*5*) 'a (*6*)) (*7*) stmt (*8*) list (*9*)
    * (*10*) ( (*11*)'a (*12*), (*13*) 'b (*14*)) (*15*) stmt (*16*) list (*17*)
and (*18*) ( (*19*)'b (*20*), (*21*) 'a (*22*)) (*23*) expr (*24*) = (*25*)
(*26*)
  Stmt (*27*) of (*28*) ( (*29*)'a (*30*), (*31*) 'a (*32*)) (*33*) stmt (*34*)
| (*35*) Int (*36*) of (*37*) 'b (*38*)
| (*39*) Bop (*40*) of (*41*)
    ( (*42*) 'b (*43*)
    , (*44*) 'a (*45*)
    ) (*46*) expr (*47*)
    * (*48*) ( (*49*)'a (*50*), (*51*) 'b (*52*)) (*53*) expr (*54*)
val expr_stmt = fn (b_, a_) =>
  let
    open Tie
    val Y = Generic.Y
    val _ & _ & _ & _ & expr_0 & _ & _ & stmt_6 =
      fix (Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y)
        (fn expr_3 & expr_2 & expr_5 & stmt_7 & expr_0 & stmt_4 & stmt_1 &
             stmt_6 =>
           let
             open Generic
             fun expr (*24*) (expr_3, expr_0, stmt_1, a_, b_) =
               data'
                 (C1' "Stmt" stmt_1 +` C1' "Int" b_
                  +` C1' "Bop" (tuple2 (expr_0, expr_3)))
                 ( fn Bop (*40*) ? => INR ?
                    | Int (*36*) ? => INL (INR ?)
                    | Stmt (*27*) ? => INL (INL ?)
                 , fn INR ? => Bop (*40*) ?
                    | INL (INR ?) => Int (*36*) ?
                    | INL (INL ?) => Stmt (*27*) ?
                 )
             fun stmt (*g*) (stmt_6, stmt_7, expr_0, a_, b_) =
               data'
                 (C1' "Assign" (tuple2 (b_, expr_0))
                  +`
                  C1' "If"
                    (tuple3 (expr_0, list (*9*) stmt_7, list (*17*) stmt_6)))
                 ( fn If (*t*) ? => INR ? | Assign (*i*) ? => INL ?
                 , fn INR ? => If (*t*) ? | INL ? => Assign (*i*) ?
                 )
           in
             expr (expr_0, expr_3, stmt_4, b_, a_)
             & expr (expr_2, expr_2, stmt_1, a_, a_)
             & expr (expr_5, expr_5, stmt_4, b_, b_)
             & stmt (stmt_7, stmt_6, expr_3, b_, a_)
             & expr (expr_3, expr_0, stmt_1, a_, b_)
             & stmt (stmt_4, stmt_4, expr_5, b_, b_)
             & stmt (stmt_1, stmt_1, expr_2, a_, a_)
             & stmt (stmt_6, stmt_7, expr_0, a_, b_)
           end)
  in
    (expr_0, stmt_6)
  end
val expr (*24*) = fn ? => #1 (expr_stmt ?)
val stmt (*g*) = fn ? => #2 (expr_stmt ?)

datatype (*55*) ( (*56*)'a (*57*), (*58*) 'b (*59*)) (*60*) stmt (*61*) = (*62*)
  Stmt (*63*) of (*64*)
    { (*65*) a: (*66*) int (*67*) * (*68*) 'b (*69*)
    , (*70*) b: (*71*) 'a (*72*)
    } (*73*)
    * (*74*) 'b (*75*)
val stmt (*61*) = fn (a_, b_) =>
  let
    open Generic
  in
    data'
      (C1' "Stmt" (tuple2
         ( record' (R' "a" (tuple2 (int (*67*), b_)) *` R' "b" a_)
             (fn {a, b} => a & b, fn a & b => {a = a, b = b})
         , b_
         ))) (fn Stmt (*63*) ? => ?, fn ? => Stmt (*63*) ?)
  end