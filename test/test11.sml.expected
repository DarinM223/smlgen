infix & *`

type t =
  { a: int
  , b: real
  , c: string
  , d: char
  , e: bool
  , f: int * real
  , g: string list
  , h: char ref * (bool * int) ref * {a: int, b: string} ref
  , i: int ref ref ref
  , j: unit * unit * {a: unit, b: unit}
  , k: int option ref option option
  }
val t =
  let
    open Generic
  in
    record'
      (R' "a" int *` R' "b" real *` R' "c" string *` R' "d" char *` R' "e" bool
       *` R' "f" (tuple2 (int, real)) *` R' "g" (list string)
       *`
       R' "h"
         (tuple3
            ( refc char
            , refc (tuple2 (bool, int))
            , refc
                (record' (R' "a" int *` R' "b" string)
                   (fn {a, b} => a & b, fn a & b => {a = a, b = b}))
            )) *` R' "i" (refc (refc (refc int)))
       *`
       R' "j"
         (tuple3
            ( unit
            , unit
            , record' (R' "a" unit *` R' "b" unit)
                (fn {a, b} => a & b, fn a & b => {a = a, b = b})
            )) *` R' "k" (option (option (refc (option int)))))
      ( fn {a, b, c, d, e, f, g, h, i, j, k} =>
          a & b & c & d & e & f & g & h & i & j & k
      , fn a & b & c & d & e & f & g & h & i & j & k =>
          { a = a
          , b = b
          , c = c
          , d = d
          , e = e
          , f = f
          , g = g
          , h = h
          , i = i
          , j = j
          , k = k
          }
      )
  end
local
  fun showOption f (SOME s) = "SOME " ^ f s
    | showOption _ NONE = "NONE"
in
  val show =
    fn { a = t0
       , b = t1
       , c = t2
       , d = t3
       , e = t4
       , f = (t5, t6)
       , g = t7
       , h = (ref t8, ref (t9, t10), ref {a = t11, b = t12})
       , i = ref (ref (ref t13))
       , j = (_, _, {a = _, b = _})
       , k = t14
       } =>
      "{"
      ^
      String.concatWith ", "
        [ "a = " ^ Int.toString t0
        , "b = " ^ Real.toString t1
        , "c = " ^ "\"" ^ t2 ^ "\""
        , "d = " ^ "#\"" ^ Char.toString t3 ^ "\""
        , "e = " ^ Bool.toString t4
        , "f = "
          ^ "(" ^ String.concatWith ", " [Int.toString t5, Real.toString t6]
          ^ ")"
        , "g = "
          ^
          "[" ^ String.concatWith ", " (List.map (fn t0 => "\"" ^ t0 ^ "\"") t7)
          ^ "]"
        , "h = "
          ^
          "("
          ^
          String.concatWith ", "
            [ "ref " ^ "#\"" ^ Char.toString t8 ^ "\""
            , "ref "
              ^
              "(" ^ String.concatWith ", " [Bool.toString t9, Int.toString t10]
              ^ ")"
            , "ref "
              ^
              "{"
              ^
              String.concatWith ", "
                ["a = " ^ Int.toString t11, "b = " ^ "\"" ^ t12 ^ "\""] ^ "}"
            ] ^ ")"
        , "i = " ^ "ref " ^ "ref " ^ "ref " ^ Int.toString t13
        , "j = "
          ^
          "("
          ^
          String.concatWith ", "
            [ "()"
            , "()"
            , "{" ^ String.concatWith ", " ["a = " ^ "()", "b = " ^ "()"] ^ "}"
            ] ^ ")"
        , "k = "
          ^
          showOption
            (showOption (fn (ref t0) => "ref " ^ showOption Int.toString t0))
            t14
        ] ^ "}"
end
local
  fun compareBool (false, true) = LESS
    | compareBool (true, false) = GREATER
    | compareBool (_, _) = EQUAL
  fun compareList cmp (x :: xs, y :: ys) =
        (case cmp (x, y) of
           EQUAL => compareList cmp (xs, ys)
         | ? => ?)
    | compareList _ (_ :: _, []) = GREATER
    | compareList _ ([], _ :: _) = LESS
    | compareList _ _ = EQUAL
  fun compareOption cmp (SOME x, SOME y) = cmp (x, y)
    | compareOption _ (SOME _, NONE) = GREATER
    | compareOption _ (NONE, SOME _) = LESS
    | compareOption _ (NONE, NONE) = EQUAL
in
  val compare =
    fn ( { a = t0
         , b = t1
         , c = t2
         , d = t3
         , e = t4
         , f = (t5, t6)
         , g = t7
         , h = (ref t8, ref (t9, t10), ref {a = t11, b = t12})
         , i = ref (ref (ref t13))
         , j = (_, _, {a = _, b = _})
         , k = t14
         }
       , { a = t15
         , b = t16
         , c = t17
         , d = t18
         , e = t19
         , f = (t20, t21)
         , g = t22
         , h = (ref t23, ref (t24, t25), ref {a = t26, b = t27})
         , i = ref (ref (ref t28))
         , j = (_, _, {a = _, b = _})
         , k = t29
         }
       ) =>
      (case Int.compare (t0, t15) of
         EQUAL =>
           (case Real.compare (t1, t16) of
              EQUAL =>
                (case String.compare (t2, t17) of
                   EQUAL =>
                     (case Char.compare (t3, t18) of
                        EQUAL =>
                          (case compareBool (t4, t19) of
                             EQUAL =>
                               (case
                                  (case Int.compare (t5, t20) of
                                     EQUAL => Real.compare (t6, t21)
                                   | ? => ?)
                                of
                                  EQUAL =>
                                    (case compareList String.compare (t7, t22) of
                                       EQUAL =>
                                         (case
                                            (case Char.compare (t8, t23) of
                                               EQUAL =>
                                                 (case
                                                    (case compareBool (t9, t24) of
                                                       EQUAL =>
                                                         Int.compare (t10, t25)
                                                     | ? => ?)
                                                  of
                                                    EQUAL =>
                                                      (case
                                                         Int.compare (t11, t26)
                                                       of
                                                         EQUAL =>
                                                           String.compare
                                                             (t12, t27)
                                                       | ? => ?)
                                                  | ? => ?)
                                             | ? => ?)
                                          of
                                            EQUAL =>
                                              (case Int.compare (t13, t28) of
                                                 EQUAL =>
                                                   compareOption
                                                     (compareOption
                                                        (fn ((ref t0), (ref t1)) =>
                                                           compareOption
                                                             Int.compare
                                                             (t0, t1)))
                                                     (t14, t29)
                                               | ? => ?)
                                          | ? => ?)
                                     | ? => ?)
                                | ? => ?)
                           | ? => ?)
                      | ? => ?)
                 | ? => ?)
            | ? => ?)
       | ? => ?)
end
local
  fun eqList eq (x :: xs, y :: ys) =
        eq (x, y) andalso eqList eq (xs, ys)
    | eqList _ ([], []) = true
    | eqList _ _ = false
  fun eqOption eq (SOME x, SOME y) = eq (x, y)
    | eqOption _ (NONE, NONE) = true
    | eqOption _ _ = false
in
  val op== =
    fn ( { a = t0
         , b = t1
         , c = t2
         , d = t3
         , e = t4
         , f = (t5, t6)
         , g = t7
         , h = (t8, t9, t10)
         , i = t11
         , j = (_, _, {a = _, b = _})
         , k = t12
         }
       , { a = t13
         , b = t14
         , c = t15
         , d = t16
         , e = t17
         , f = (t18, t19)
         , g = t20
         , h = (t21, t22, t23)
         , i = t24
         , j = (_, _, {a = _, b = _})
         , k = t25
         }
       ) =>
      t0 = t13 andalso Real.== (t1, t14) andalso t2 = t15 andalso t3 = t16
      andalso t4 = t17 andalso t5 = t18 andalso Real.== (t6, t19)
      andalso eqList op= (t7, t20)
      andalso t8 = t21 andalso t9 = t22 andalso t10 = t23 andalso t11 = t24
      andalso eqOption (eqOption op=) (t12, t25)
end
local
  val combine = fn (a, b) => 0w31 * a + b
  val hashString =
    #1
    o
    Substring.foldl
      (fn (ch, (h, p)) =>
         ( Word.mod (h + Word.fromInt (Char.ord ch + 1) * p, 0w1000000009)
         , Word.mod (p * 0w31, 0w1000000009)
         )) (0w0, 0w1) o Substring.full
  fun hashOption hash opt =
    Option.getOpt (Option.map hash opt, 0wx1A35B599)
  fun hashList _ [] = 0wx6D52A54D
    | hashList hash l =
        List.foldl (fn (i, acc) => combine (acc, hash i))
          (Word.fromInt (List.length l)) l
in
  val hash =
    fn { a = t0
       , b = t1
       , c = t2
       , d = t3
       , e = t4
       , f = (t5, t6)
       , g = t7
       , h = (ref t8, ref (t9, t10), ref {a = t11, b = t12})
       , i = ref (ref (ref t13))
       , j = (_, _, {a = _, b = _})
       , k = t14
       } =>
      let
        val result = Word.fromInt t0
        val result = combine (result, hashString (Real.toString t1))
        val result = combine (result, hashString t2)
        val result = combine (result, Word.fromInt (Char.ord t3))
        val result = combine (result, if t4 then 0wx096DB16D else 0wx01B56B6D)
        val result = combine (result, Word.fromInt t5)
        val result = combine (result, hashString (Real.toString t6))
        val result = combine (result, hashList hashString t7)
        val result = combine (result, Word.fromInt (Char.ord t8))
        val result = combine (result, if t9 then 0wx096DB16D else 0wx01B56B6D)
        val result = combine (result, Word.fromInt t10)
        val result = combine (result, Word.fromInt t11)
        val result = combine (result, hashString t12)
        val result = combine (result, Word.fromInt t13)
        val result = combine (result, 0wx65B2531B)
        val result = combine (result, 0wx65B2531B)
        val result = combine (result, 0wx65B2531B)
        val result = combine (result, 0wx65B2531B)
        val result = combine
          ( result
          , hashOption (hashOption (fn (ref t0) => hashOption Word.fromInt t0))
              t14
          )
      in
        result
      end
end