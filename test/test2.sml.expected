infix &

datatype ('a, 'b) stmt =
  Assign of 'a * ('a, 'b) expr
| If of ('a, 'b) expr * ('b, 'a) stmt list * ('a, 'b) stmt list
and ('b, 'a) expr =
  Stmt of ('a, 'a) stmt
| Int of 'b
| Bop of ('b, 'a) expr * ('a, 'b) expr
val expr_stmt = fn (b_, a_) =>
  let
    open Tie
    val Y = Generic.Y
    val _ & _ & _ & _ & expr_0 & _ & _ & stmt_6 =
      fix (Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y)
        (fn expr_3 & expr_2 & expr_5 & stmt_7 & expr_0 & stmt_4 & stmt_1 &
             stmt_6 =>
           let
             open Generic
             fun expr (expr_3, expr_0, stmt_1, a_, b_) =
               data'
                 (C1' "Stmt" stmt_1 +` C1' "Int" b_
                  +` C1' "Bop" (tuple2 (expr_0, expr_3)))
                 ( fn Bop ? => INR ?
                    | Int ? => INL (INR ?)
                    | Stmt ? => INL (INL ?)
                 , fn INR ? => Bop ?
                    | INL (INR ?) => Int ?
                    | INL (INL ?) => Stmt ?
                 )
             fun stmt (stmt_6, stmt_7, expr_0, a_, b_) =
               data'
                 (C1' "Assign" (tuple2 (b_, expr_0))
                  +` C1' "If" (tuple3 (expr_0, list stmt_7, list stmt_6)))
                 ( fn If ? => INR ? | Assign ? => INL ?
                 , fn INR ? => If ? | INL ? => Assign ?
                 )
           in
             expr (expr_0, expr_3, stmt_4, b_, a_)
             & expr (expr_2, expr_2, stmt_1, a_, a_)
             & expr (expr_5, expr_5, stmt_4, b_, b_)
             & stmt (stmt_7, stmt_6, expr_3, b_, a_)
             & expr (expr_3, expr_0, stmt_1, a_, b_)
             & stmt (stmt_4, stmt_4, expr_5, b_, b_)
             & stmt (stmt_1, stmt_1, expr_2, a_, a_)
             & stmt (stmt_6, stmt_7, expr_0, a_, b_)
           end)
  in
    (expr_0, stmt_6)
  end
val expr = fn ? => #1 (expr_stmt ?)
val stmt = fn ? => #2 (expr_stmt ?)

datatype ('a, 'b) stmt =
  Assign of 'a * ('a, 'b) expr * ('a, int) expr * (string, 'b) expr
| If of ('a, 'b) expr * ('b, 'a) stmt list * ('a, 'b) stmt list
and ('c, 'd) expr =
  Stmt of ('c, 'c) stmt
| Int of 'd
| Bop of ('d, 'c) expr * ('c, 'd) expr
val expr_stmt = fn (c_, d_) =>
  let
    open Tie
    val Y = Generic.Y
    val
      _ & expr_0 & _ & _ & _ & _ & _ & _ & _ & _ & stmt_20 & _ & _ & _ & _ & _ &
        _ & _ & _ & _ & _ & _ =
      fix
        (Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y
         *` Y *` Y *` Y *` Y *` Y *` Y *` Y)
        (fn expr_19 & expr_0 & stmt_1 & expr_7 & stmt_14 & expr_15 & expr_6 &
             expr_12 & expr_3 & expr_17 & stmt_20 & expr_13 & stmt_5 & expr_18 &
             expr_10 & expr_9 & stmt_21 & expr_16 & expr_4 & stmt_8 & expr_11 &
             expr_2 =>
           let
             open Generic
             fun expr (expr_0, expr_13, stmt_1, d_, c_) =
               data'
                 (C1' "Stmt" stmt_1 +` C1' "Int" d_
                  +` C1' "Bop" (tuple2 (expr_13, expr_0)))
                 ( fn Bop ? => INR ?
                    | Int ? => INL (INR ?)
                    | Stmt ? => INL (INL ?)
                 , fn INR ? => Bop ?
                    | INL (INR ?) => Int ?
                    | INL (INL ?) => Stmt ?
                 )
             fun stmt (stmt_20, stmt_21, expr_0, expr_18, expr_3, d_, c_) =
               data'
                 (C1' "Assign" (tuple4 (c_, expr_0, expr_3, expr_18))
                  +` C1' "If" (tuple3 (expr_0, list stmt_21, list stmt_20)))
                 ( fn If ? => INR ? | Assign ? => INL ?
                 , fn INR ? => If ? | INL ? => Assign ?
                 )
           in
             expr (expr_19, expr_18, stmt_14, string, d_)
             & expr (expr_0, expr_13, stmt_1, d_, c_)
             & stmt (stmt_1, stmt_1, expr_2, expr_11, expr_3, c_, c_)
             & expr (expr_7, expr_10, stmt_8, int, string)
             & stmt (stmt_14, stmt_14, expr_15, expr_18, expr_16, d_, d_)
             & expr (expr_15, expr_15, stmt_14, d_, d_)
             & expr (expr_6, expr_6, stmt_5, int, int)
             & expr (expr_12, expr_11, stmt_1, string, c_)
             & expr (expr_3, expr_4, stmt_1, int, c_)
             & expr (expr_17, expr_16, stmt_5, d_, int)
             & stmt (stmt_20, stmt_21, expr_0, expr_18, expr_3, d_, c_)
             & expr (expr_13, expr_0, stmt_14, c_, d_)
             & stmt (stmt_5, stmt_5, expr_6, expr_7, expr_6, int, int)
             & expr (expr_18, expr_19, stmt_8, d_, string)
             & expr (expr_10, expr_7, stmt_5, string, int)
             & expr (expr_9, expr_9, stmt_8, string, string)
             & stmt (stmt_21, stmt_20, expr_13, expr_11, expr_16, c_, d_)
             & expr (expr_16, expr_17, stmt_14, int, d_)
             & expr (expr_4, expr_3, stmt_5, c_, int)
             & stmt (stmt_8, stmt_8, expr_9, expr_9, expr_7, string, string)
             & expr (expr_11, expr_12, stmt_8, c_, string)
             & expr (expr_2, expr_2, stmt_1, c_, c_)
           end)
  in
    (expr_0, stmt_20)
  end
val expr = fn ? => #1 (expr_stmt ?)
val stmt = fn ? => #2 (expr_stmt ?)

datatype ('a, 'b) stmt =
  Assign of 'a * 'a expr
| If of 'b expr * ('b, 'a) stmt list * ('a, 'b) stmt list
and 'a expr =
  Stmt of ('a, int) stmt * (string, 'a) stmt
| Int of 'a
| Bop of 'a expr * 'a expr
val expr_stmt = fn (a_, b_) =>
  let
    open Tie
    val Y = Generic.Y
    val
      _ & _ & _ & _ & _ & _ & stmt_11 & _ & expr_0 & _ & _ & _ & _ & _ & _ & _ &
        _ & _ =
      fix
        (Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y *` Y
         *` Y *` Y *` Y)
        (fn stmt_8 & stmt_9 & stmt_16 & expr_2 & expr_12 & stmt_10 & stmt_11 &
             stmt_3 & expr_0 & stmt_4 & stmt_14 & stmt_15 & stmt_6 & expr_5 &
             stmt_13 & stmt_1 & stmt_17 & stmt_7 =>
           let
             open Generic
             fun expr (expr_0, stmt_9, stmt_1, a_) =
               data'
                 (C1' "Stmt" (tuple2 (stmt_1, stmt_9)) +` C1' "Int" a_
                  +` C1' "Bop" (tuple2 (expr_0, expr_0)))
                 ( fn Bop ? => INR ?
                    | Int ? => INL (INR ?)
                    | Stmt ? => INL (INL ?)
                 , fn INR ? => Bop ?
                    | INL (INR ?) => Int ?
                    | INL (INL ?) => Stmt ?
                 )
             fun stmt (stmt_11, stmt_17, expr_12, expr_0, b_, a_) =
               data'
                 (C1' "Assign" (tuple2 (a_, expr_0))
                  +` C1' "If" (tuple3 (expr_12, list stmt_17, list stmt_11)))
                 ( fn If ? => INR ? | Assign ? => INL ?
                 , fn INR ? => If ? | INL ? => Assign ?
                 )
           in
             stmt (stmt_8, stmt_1, expr_0, expr_2, a_, int)
             & stmt (stmt_9, stmt_10, expr_0, expr_5, a_, string)
             & stmt (stmt_16, stmt_15, expr_5, expr_12, string, b_)
             & expr (expr_2, stmt_4, stmt_3, int)
             & expr (expr_12, stmt_15, stmt_13, b_)
             & stmt (stmt_10, stmt_9, expr_5, expr_0, string, a_)
             & stmt (stmt_11, stmt_17, expr_12, expr_0, b_, a_)
             & stmt (stmt_3, stmt_3, expr_2, expr_2, int, int)
             & expr (expr_0, stmt_9, stmt_1, a_)
             & stmt (stmt_4, stmt_7, expr_2, expr_5, int, string)
             & stmt (stmt_14, stmt_13, expr_12, expr_2, b_, int)
             & stmt (stmt_15, stmt_16, expr_12, expr_5, b_, string)
             & stmt (stmt_6, stmt_6, expr_5, expr_5, string, string)
             & expr (expr_5, stmt_6, stmt_4, string)
             & stmt (stmt_13, stmt_14, expr_2, expr_12, int, b_)
             & stmt (stmt_1, stmt_8, expr_2, expr_0, int, a_)
             & stmt (stmt_17, stmt_11, expr_0, expr_12, a_, b_)
             & stmt (stmt_7, stmt_4, expr_5, expr_2, string, int)
           end)
  in
    (expr_0, stmt_11)
  end
val expr = fn ? => #1 (expr_stmt ?)
val stmt = fn ? => #2 (expr_stmt ?)

datatype 'a t = T of 'a t * int t * string t
val t = fn a_ =>
  let
    open Tie
    val Y = Generic.Y
    val _ & _ & t_0 = fix (Y *` Y *` Y) (fn t_2 & t_1 & t_0 =>
      let
        open Generic
        fun t (t_2, t_1, t_0, a_) =
          data' (C1' "T" (tuple3 (t_0, t_1, t_2))) (fn T ? => ?, fn ? => T ?)
      in
        t (t_2, t_1, t_2, string) & t (t_2, t_1, t_1, int)
        & t (t_2, t_1, t_0, a_)
      end)
  in
    (t_0)
  end
val t = fn ? => t ?