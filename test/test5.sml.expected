datatype ('a, 'b) stmt =
  Assign of 'a * ('a, 'b) expr
| If of ('a, 'b) expr * ('b, 'a) stmt list * ('a, 'b) stmt list
and ('a, 'b) expr =
  Stmt of ('a, 'a) stmt
| Int of 'b
| Bop of ('b, 'a) expr * ('a, 'b) expr
local
  val rec expr = fn (expr_0, expr_3, stmt_1, b_, a_) =>
    fn Stmt stmt0 => "Stmt" ^ " " ^ "(" ^ stmt_1 stmt0 ^ ")"
     | Int b_1 => "Int" ^ " " ^ b_ b_1
     | Bop (expr2, expr3) =>
      "Bop" ^ " "
      ^ "(" ^ String.concatWith ", " [expr_3 expr2, expr_0 expr3] ^ ")"
  and rec stmt = fn (stmt_6, stmt_7, expr_0, b_, a_) =>
    fn Assign (a_0, expr1) =>
      "Assign" ^ " " ^ "(" ^ String.concatWith ", " [a_ a_0, expr_0 expr1] ^ ")"
     | If (expr2, list3, list4) =>
      "If" ^ " "
      ^
      "("
      ^
      String.concatWith ", "
        [ expr_0 expr2
        , "[" ^ String.concatWith ", " (List.map (stmt_7) list3) ^ "]"
        , "[" ^ String.concatWith ", " (List.map (stmt_6) list4) ^ "]"
        ] ^ ")"
  val expr_stmt = fn (a_, b_) =>
    let
      val rec expr_0 = fn ? => expr (expr_0, expr_3, stmt_1, b_, a_) ?
      and rec expr_2 = fn ? => expr (expr_2, expr_2, stmt_1, a_, a_) ?
      and rec expr_5 = fn ? => expr (expr_5, expr_5, stmt_4, b_, b_) ?
      and rec stmt_6 = fn ? => stmt (stmt_6, stmt_7, expr_0, b_, a_) ?
      and rec expr_3 = fn ? => expr (expr_3, expr_0, stmt_4, a_, b_) ?
      and rec stmt_4 = fn ? => stmt (stmt_4, stmt_4, expr_5, b_, b_) ?
      and rec stmt_1 = fn ? => stmt (stmt_1, stmt_1, expr_2, a_, a_) ?
      and rec stmt_7 = fn ? => stmt (stmt_7, stmt_6, expr_3, a_, b_) ?
    in
      (expr_0, stmt_6)
    end
in
  val showExpr = fn ? => #1 (expr_stmt ?)
  val showStmt = fn ? => #2 (expr_stmt ?)
end

datatype 'a foo = Foo of 'a * 'a foo * string foo | Nil
local
  val rec foo = fn (foo_1, foo_0, a_) =>
    fn Foo (a_0, foo1, foo2) =>
      "Foo" ^ " "
      ^ "(" ^ String.concatWith ", " [a_ a_0, foo_0 foo1, foo_1 foo2] ^ ")"
     | Nil => "Nil"
  val foo = fn (a_) =>
    let
      val rec foo_0 = fn ? => foo (foo_1, foo_0, a_) ?
      and rec foo_1 = fn ? =>
        foo (foo_1, foo_1, fn string0 => "\"" ^ string0 ^ "\"") ?
    in
      (foo_0)
    end
in val showFoo = fn ? => foo ?
end