datatype ('a, 'b) stmt =
  Assign of 'a * ('a, 'b) expr
| If of ('a, 'b) expr * ('b, 'a) stmt list * ('a, 'b) stmt list
and ('a, 'b) expr =
  Stmt of ('a, 'a) stmt
| Int of 'b
| Bop of ('b, 'a) expr * ('a, 'b) expr
local
  val rec expr = fn (expr_0, expr_3, stmt_1, b_, a_) =>
    fn Stmt t0 => "Stmt " ^ "(" ^ stmt_1 t0 ^ ")"
     | Int t1 => "Int " ^ b_ t1
     | Bop (t2, t3) =>
      "Bop " ^ "(" ^ String.concatWith ", " [expr_3 t2, expr_0 t3] ^ ")"
  and stmt = fn (stmt_6, stmt_7, expr_0, b_, a_) =>
    fn Assign (t0, t1) =>
      "Assign " ^ "(" ^ String.concatWith ", " [a_ t0, expr_0 t1] ^ ")"
     | If (t2, t3, t4) =>
      "If "
      ^
      "("
      ^
      String.concatWith ", "
        [ expr_0 t2
        , "[" ^ String.concatWith ", " (List.map stmt_7 t3) ^ "]"
        , "[" ^ String.concatWith ", " (List.map stmt_6 t4) ^ "]"
        ] ^ ")"
  val expr_stmt = fn (a_, b_) =>
    let
      val rec expr_0 = fn ? => expr (expr_0, expr_3, stmt_1, b_, a_) ?
      and expr_2 = fn ? => expr (expr_2, expr_2, stmt_1, a_, a_) ?
      and expr_5 = fn ? => expr (expr_5, expr_5, stmt_4, b_, b_) ?
      and stmt_6 = fn ? => stmt (stmt_6, stmt_7, expr_0, b_, a_) ?
      and expr_3 = fn ? => expr (expr_3, expr_0, stmt_4, a_, b_) ?
      and stmt_4 = fn ? => stmt (stmt_4, stmt_4, expr_5, b_, b_) ?
      and stmt_1 = fn ? => stmt (stmt_1, stmt_1, expr_2, a_, a_) ?
      and stmt_7 = fn ? => stmt (stmt_7, stmt_6, expr_3, a_, b_) ?
    in
      (expr_0, stmt_6)
    end
in
  val showExpr = fn ? => #1 (expr_stmt ?)
  val showStmt = fn ? => #2 (expr_stmt ?)
end

datatype 'a foo = Foo of 'a * 'a foo * string foo | Nil
local
  val rec foo = fn (foo_1, foo_0, a_) =>
    fn Foo (t0, t1, t2) =>
      "Foo " ^ "(" ^ String.concatWith ", " [a_ t0, foo_0 t1, foo_1 t2] ^ ")"
     | Nil => "Nil"
  val foo = fn a_ =>
    let
      val rec foo_0 = fn ? => foo (foo_1, foo_0, a_) ?
      and foo_1 = fn ? => foo (foo_1, foo_1, fn t0 => "\"" ^ t0 ^ "\"") ?
    in
      foo_0
    end
in val showFoo = foo
end

type ('a, 'b) hello = {a: 'a * 'a * 'b, b: ('a, 'b) stmt}
val showHello = fn (a_, b_) =>
  fn {a = (t0, t1, t2), b = t3} =>
    "{"
    ^
    String.concatWith ", "
      [ "a = " ^ "(" ^ String.concatWith ", " [a_ t0, a_ t1, b_ t2] ^ ")"
      , "b = " ^ showStmt (a_, b_) t3
      ] ^ "}"